<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/Client/LogoutHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/Client/LogoutHandler.java" />
              <option name="originalContent" value="package Client;&#10;&#10;/**&#10; * 包装类：实际实现已迁移至 Client.login.LogoutHandler。&#10; * 仅为兼容旧引用保留，后续可移除。 &#10; * 使用请改为引用 Client.login.LogoutHandler。 &#10; * @author Msgo-srAm&#10; */&#10;@Deprecated&#10;public class LogoutHandler extends Client.login.LogoutHandler {&#10;}&#10;" />
              <option name="updatedContent" value="package Client;&#10;&#10;// 已移除：原退出处理类迁移至 Client.login.LogoutHandler。&#10;// 请使用 Client.login.LogoutHandler。此文件为过渡占位，可后续物理删除。" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/Server/dao/shop/StoreMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/Server/dao/shop/StoreMapper.java" />
              <option name="originalContent" value="package Server.dao.shop;&#10;&#10;import Server.model.shop.StoreItem;&#10;import Server.model.shop.StoreOrder;&#10;import Server.model.shop.StoreOrderItem;&#10;import org.apache.ibatis.annotations.*;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;/**&#10; * 商店数据访问接口&#10; */&#10;public interface StoreMapper {&#10;    // 商品相关操作&#10;&#10;    /**&#10;     * 查询所有商品&#10;     */&#10;    @Select(&quot;SELECT * FROM store_item&quot;)&#10;    List&lt;StoreItem&gt; findAllItems();&#10;&#10;    /**&#10;     * 根据关键词搜索商品&#10;     */&#10;    @Select(&quot;SELECT * FROM store_item WHERE item_name LIKE CONCAT('%', #{keyword}, '%') OR description LIKE CONCAT('%', #{keyword}, '%')&quot;)&#10;    List&lt;StoreItem&gt; searchItems(@Param(&quot;keyword&quot;) String keyword);&#10;&#10;    /**&#10;     * 根据ID查询商品&#10;     */&#10;    @Select(&quot;SELECT * FROM store_item WHERE uuid = #{uuid}&quot;)&#10;    StoreItem findItemById(@Param(&quot;uuid&quot;) UUID uuid);&#10;&#10;    /**&#10;     * 添加新商品&#10;     */&#10;    @Insert(&quot;INSERT INTO store_item (uuid, item_name, price, picture_link, stock, sales_volume, description, barcode) &quot; +&#10;            &quot;VALUES (#{uuid}, #{itemName}, #{price}, #{pictureLink}, #{stock}, 0, #{description}, #{barcode})&quot;)&#10;    int insertItem(StoreItem item);&#10;&#10;    /**&#10;     * 更新商品信息&#10;     */&#10;    @Update(&quot;UPDATE store_item SET item_name = #{itemName}, price = #{price}, picture_link = #{pictureLink}, &quot; +&#10;            &quot;stock = #{stock}, sales_volume = #{salesVolume}, description = #{description}, barcode = #{barcode}, category = #{category}&quot; +&#10;            &quot;WHERE uuid = #{uuid}&quot;)&#10;    int updateItem(StoreItem item);&#10;&#10;    /**&#10;     * 删除商品&#10;     */&#10;    @Delete(&quot;DELETE FROM store_item WHERE uuid = #{uuid}&quot;)&#10;    int deleteItem(@Param(&quot;uuid&quot;) UUID uuid);&#10;&#10;    /**&#10;     * 更新商品库存&#10;     */&#10;    @Update(&quot;UPDATE store_item SET stock = stock - #{amount} WHERE uuid = #{itemUuid} AND stock &gt;= #{amount}&quot;)&#10;    int updateItemStock(@Param(&quot;itemUuid&quot;) UUID itemUuid, @Param(&quot;amount&quot;) Integer amount);&#10;&#10;    /**&#10;     * 增加商品销量&#10;     */&#10;    @Update(&quot;UPDATE store_item SET sales_volume = sales_volume + #{amount} WHERE uuid = #{itemUuid}&quot;)&#10;    int increaseItemSales(@Param(&quot;itemUuid&quot;) UUID itemUuid, @Param(&quot;amount&quot;) Integer amount);&#10;&#10;    /**&#10;     * 按类别搜索商品&#10;     */&#10;    @Select(&quot;SELECT * FROM store_item WHERE category = #{category}&quot;)&#10;    List&lt;StoreItem&gt; findItemsByCategory(@Param(&quot;category&quot;) String category);&#10;&#10;    /**&#10;     * 获取所有商品类别&#10;     */&#10;    @Select(&quot;SELECT DISTINCT category FROM store_item&quot;)&#10;    List&lt;String&gt; findAllCategories();&#10;&#10;    /**&#10;     * 按类别和关键词搜索商品&#10;     */&#10;    @Select(&quot;SELECT * FROM store_item WHERE category = #{category} AND &quot; +&#10;            &quot;(item_name LIKE CONCAT('%', #{keyword}, '%') OR description LIKE CONCAT('%', #{keyword}, '%'))&quot;)&#10;    List&lt;StoreItem&gt; searchItemsByCategoryAndKeyword(@Param(&quot;category&quot;) String category,&#10;                                                    @Param(&quot;keyword&quot;) String keyword);&#10;&#10;    // 订单相关操作（支持多种商品）&#10;&#10;    /**&#10;     * 插入订单主信息&#10;     */&#10;    @Insert(&quot;INSERT INTO store_order (uuid, card_number, total_amount, time, status, remark) &quot; +&#10;            &quot;VALUES (#{uuid}, #{cardNumber}, #{totalAmount}, #{time}, #{status}, #{remark})&quot;)&#10;    int insertOrder(StoreOrder order);&#10;&#10;    /**&#10;     * 插入订单商品项&#10;     */&#10;    @Insert(&quot;INSERT INTO store_order_item (uuid, order_uuid, item_uuid, item_price, amount) &quot; +&#10;            &quot;VALUES (#{uuid}, #{orderUuid}, #{itemUuid}, #{itemPrice}, #{amount})&quot;)&#10;    int insertOrderItem(StoreOrderItem orderItem);&#10;&#10;    /**&#10;     * 根据ID查询订单（包含商品项）&#10;     */&#10;    @Select(&quot;SELECT * FROM store_order WHERE uuid = #{uuid}&quot;)&#10;    @Results({&#10;            @Result(property = &quot;uuid&quot;, column = &quot;uuid&quot;),&#10;            @Result(property = &quot;items&quot;, column = &quot;uuid&quot;,&#10;                    many = @Many(select = &quot;Server.dao.shop.StoreMapper.findOrderItemsByOrderId&quot;))&#10;    })&#10;    StoreOrder findOrderById(@Param(&quot;uuid&quot;) UUID uuid);&#10;&#10;    /**&#10;     * 查询订单的所有商品项&#10;     */&#10;    @Select(&quot;SELECT * FROM store_order_item WHERE order_uuid = #{orderUuid}&quot;)&#10;    List&lt;StoreOrderItem&gt; findOrderItemsByOrderId(@Param(&quot;orderUuid&quot;) UUID orderUuid);&#10;&#10;    /**&#10;     * 更新订单状态&#10;     */&#10;    @Update(&quot;UPDATE store_order SET status = #{status} WHERE uuid = #{uuid}&quot;)&#10;    int updateOrderStatus(@Param(&quot;uuid&quot;) UUID uuid, @Param(&quot;status&quot;) String status);&#10;&#10;    /**&#10;     * 删除订单（同时删除关联的商品项）&#10;     */&#10;    @Delete(&quot;DELETE FROM store_order WHERE uuid = #{uuid}&quot;)&#10;    int deleteOrder(@Param(&quot;uuid&quot;) UUID uuid);&#10;&#10;    @Delete(&quot;DELETE FROM store_order_item WHERE order_uuid = #{orderUuid}&quot;)&#10;    int deleteOrderItems(@Param(&quot;orderUuid&quot;) UUID orderUuid);&#10;&#10;    /**&#10;     * 退款操作：更新订单状态为已退款&#10;     */&#10;    @Update(&quot;UPDATE store_order SET status = '已退款' WHERE uuid = #{orderUuid} AND status = '已支付'&quot;)&#10;    int refundOrder(@Param(&quot;orderUuid&quot;) UUID orderUuid);&#10;&#10;    /**&#10;     * 减少商品销量（退款时调用）&#10;     */&#10;    @Update(&quot;UPDATE store_item SET sales_volume = sales_volume - #{amount} WHERE uuid = #{itemUuid}&quot;)&#10;    int decreaseItemSales(@Param(&quot;itemUuid&quot;) UUID itemUuid, @Param(&quot;amount&quot;) Integer amount);&#10;&#10;    /**&#10;     * 查询用户的所有订单&#10;     */&#10;    @Select(&quot;SELECT * FROM store_order WHERE card_number = #{cardNumber} ORDER BY time DESC&quot;)&#10;    List&lt;StoreOrder&gt; findOrdersByUser(@Param(&quot;cardNumber&quot;) Integer cardNumber);&#10;&#10;    /**&#10;     * 查询所有订单&#10;     */&#10;    @Select(&quot;SELECT * FROM store_order ORDER BY time DESC&quot;)&#10;    List&lt;StoreOrder&gt; findAllOrders();&#10;&#10;    // 销售统计相关操作&#10;&#10;    /**&#10;     * 获取商品销售统计&#10;     */&#10;    @Select(&quot;SELECT si.uuid, si.item_name, SUM(st.amount) as total_amount, SUM(st.item_price * st.amount) as total_revenue &quot; +&#10;            &quot;FROM store_transaction st JOIN store_item si ON st.item_uuid = si.uuid &quot; +&#10;            &quot;WHERE st.status = true &quot; +&#10;            &quot;GROUP BY si.uuid, si.item_name &quot; +&#10;            &quot;ORDER BY total_revenue DESC&quot;)&#10;    List&lt;SalesStats&gt; getSalesStatistics();&#10;&#10;    /**&#10;     * 获取今日销售总额&#10;     */&#10;    @Select(&quot;SELECT SUM(item_price * amount) as total_revenue FROM store_transaction &quot; +&#10;            &quot;WHERE status = true AND DATE(time) = CURDATE()&quot;)&#10;    Integer getTodaySalesRevenue();&#10;&#10;    // 销售统计结果映射类&#10;    class SalesStats {&#10;        private UUID itemUuid;&#10;        private String itemName;&#10;        private Integer totalAmount;&#10;        private Integer totalRevenue;&#10;&#10;        // Getter和Setter方法&#10;        public UUID getItemUuid() {&#10;            return itemUuid;&#10;        }&#10;&#10;        public void setItemUuid(UUID itemUuid) {&#10;            this.itemUuid = itemUuid;&#10;        }&#10;&#10;        public String getItemName() {&#10;            return itemName;&#10;        }&#10;&#10;        public void setItemName(String itemName) {&#10;            this.itemName = itemName;&#10;        }&#10;&#10;        public Integer getTotalAmount() {&#10;            return totalAmount;&#10;        }&#10;&#10;        public void setTotalAmount(Integer totalAmount) {&#10;            this.totalAmount = totalAmount;&#10;        }&#10;&#10;        public Integer getTotalRevenue() {&#10;            return totalRevenue;&#10;        }&#10;&#10;        public void setTotalRevenue(Integer totalRevenue) {&#10;            this.totalRevenue = totalRevenue;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package Server.dao.shop;&#13;&#10;&#13;&#10;import Server.model.shop.StoreItem;&#13;&#10;import Server.model.shop.StoreOrder;&#13;&#10;import Server.model.shop.StoreOrderItem;&#13;&#10;import org.apache.ibatis.annotations.*;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;import java.util.UUID;&#13;&#10;&#13;&#10;/**&#13;&#10; * 商店数据访问接口&#13;&#10; */&#13;&#10;public interface StoreMapper {&#13;&#10;    // 商品相关操作&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 查询所有商品&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT * FROM store_item&quot;)&#13;&#10;    List&lt;StoreItem&gt; findAllItems();&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 根据关键词搜索商品&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT * FROM store_item WHERE item_name LIKE CONCAT('%', #{keyword}, '%') OR description LIKE CONCAT('%', #{keyword}, '%')&quot;)&#13;&#10;    List&lt;StoreItem&gt; searchItems(@Param(&quot;keyword&quot;) String keyword);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 根据ID查询商品&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT * FROM store_item WHERE uuid = #{uuid}&quot;)&#13;&#10;    StoreItem findItemById(@Param(&quot;uuid&quot;) UUID uuid);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 添加新商品&#13;&#10;     */&#13;&#10;    @Insert(&quot;INSERT INTO store_item (uuid, item_name, price, picture_link, stock, sales_volume, description, barcode) &quot; +&#13;&#10;            &quot;VALUES (#{uuid}, #{itemName}, #{price}, #{pictureLink}, #{stock}, 0, #{description}, #{barcode})&quot;)&#13;&#10;    int insertItem(StoreItem item);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 更新商品信息&#13;&#10;     */&#13;&#10;    @Update(&quot;UPDATE store_item SET item_name = #{itemName}, price = #{price}, picture_link = #{pictureLink}, &quot; +&#13;&#10;            &quot;stock = #{stock}, sales_volume = #{salesVolume}, description = #{description}, barcode = #{barcode}, category = #{category} &quot; +&#13;&#10;            &quot;WHERE uuid = #{uuid}&quot;)&#13;&#10;    int updateItem(StoreItem item);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 删除商品&#13;&#10;     */&#13;&#10;    @Delete(&quot;DELETE FROM store_item WHERE uuid = #{uuid}&quot;)&#13;&#10;    int deleteItem(@Param(&quot;uuid&quot;) UUID uuid);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 更新商品库存&#13;&#10;     */&#13;&#10;    @Update(&quot;UPDATE store_item SET stock = stock - #{amount} WHERE uuid = #{itemUuid} AND stock &gt;= #{amount}&quot;)&#13;&#10;    int updateItemStock(@Param(&quot;itemUuid&quot;) UUID itemUuid, @Param(&quot;amount&quot;) Integer amount);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 增加商品销量&#13;&#10;     */&#13;&#10;    @Update(&quot;UPDATE store_item SET sales_volume = sales_volume + #{amount} WHERE uuid = #{itemUuid}&quot;)&#13;&#10;    int increaseItemSales(@Param(&quot;itemUuid&quot;) UUID itemUuid, @Param(&quot;amount&quot;) Integer amount);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 按类别搜索商品&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT * FROM store_item WHERE category = #{category}&quot;)&#13;&#10;    List&lt;StoreItem&gt; findItemsByCategory(@Param(&quot;category&quot;) String category);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 获取所有商品类别&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT DISTINCT category FROM store_item&quot;)&#13;&#10;    List&lt;String&gt; findAllCategories();&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 按类别和关键词搜索商品&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT * FROM store_item WHERE category = #{category} AND &quot; +&#13;&#10;            &quot;(item_name LIKE CONCAT('%', #{keyword}, '%') OR description LIKE CONCAT('%', #{keyword}, '%'))&quot;)&#13;&#10;    List&lt;StoreItem&gt; searchItemsByCategoryAndKeyword(@Param(&quot;category&quot;) String category,&#13;&#10;                                                    @Param(&quot;keyword&quot;) String keyword);&#13;&#10;&#13;&#10;    // 订单相关操作（支持多种商品）&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 插入订单主信息&#13;&#10;     */&#13;&#10;    @Insert(&quot;INSERT INTO store_order (uuid, card_number, total_amount, time, status, remark) &quot; +&#13;&#10;            &quot;VALUES (#{uuid}, #{cardNumber}, #{totalAmount}, #{time}, #{status}, #{remark})&quot;)&#13;&#10;    int insertOrder(StoreOrder order);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 插入订单商品项&#13;&#10;     */&#13;&#10;    @Insert(&quot;INSERT INTO store_order_item (uuid, order_uuid, item_uuid, item_price, amount) &quot; +&#13;&#10;            &quot;VALUES (#{uuid}, #{orderUuid}, #{itemUuid}, #{itemPrice}, #{amount})&quot;)&#13;&#10;    int insertOrderItem(StoreOrderItem orderItem);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 根据ID查询订单（包含商品项）&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT * FROM store_order WHERE uuid = #{uuid}&quot;)&#13;&#10;    @Results({&#13;&#10;            @Result(property = &quot;uuid&quot;, column = &quot;uuid&quot;),&#13;&#10;            @Result(property = &quot;items&quot;, column = &quot;uuid&quot;,&#13;&#10;                    many = @Many(select = &quot;Server.dao.shop.StoreMapper.findOrderItemsByOrderId&quot;))&#13;&#10;    })&#13;&#10;    StoreOrder findOrderById(@Param(&quot;uuid&quot;) UUID uuid);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 查询订单的所有商品项&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT * FROM store_order_item WHERE order_uuid = #{orderUuid}&quot;)&#13;&#10;    List&lt;StoreOrderItem&gt; findOrderItemsByOrderId(@Param(&quot;orderUuid&quot;) UUID orderUuid);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 更新订单状态&#13;&#10;     */&#13;&#10;    @Update(&quot;UPDATE store_order SET status = #{status} WHERE uuid = #{uuid}&quot;)&#13;&#10;    int updateOrderStatus(@Param(&quot;uuid&quot;) UUID uuid, @Param(&quot;status&quot;) String status);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 删除订单（同时删除关联的商品项）&#13;&#10;     */&#13;&#10;    @Delete(&quot;DELETE FROM store_order WHERE uuid = #{uuid}&quot;)&#13;&#10;    int deleteOrder(@Param(&quot;uuid&quot;) UUID uuid);&#13;&#10;&#13;&#10;    @Delete(&quot;DELETE FROM store_order_item WHERE order_uuid = #{orderUuid}&quot;)&#13;&#10;    int deleteOrderItems(@Param(&quot;orderUuid&quot;) UUID orderUuid);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 退款操作：更新订单状态为已退款&#13;&#10;     */&#13;&#10;    @Update(&quot;UPDATE store_order SET status = '已退款' WHERE uuid = #{orderUuid} AND status = '已支付'&quot;)&#13;&#10;    int refundOrder(@Param(&quot;orderUuid&quot;) UUID orderUuid);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 减少商品销量（退款时调用）&#13;&#10;     */&#13;&#10;    @Update(&quot;UPDATE store_item SET sales_volume = sales_volume - #{amount} WHERE uuid = #{itemUuid}&quot;)&#13;&#10;    int decreaseItemSales(@Param(&quot;itemUuid&quot;) UUID itemUuid, @Param(&quot;amount&quot;) Integer amount);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 查询用户的所有订单&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT * FROM store_order WHERE card_number = #{cardNumber} ORDER BY time DESC&quot;)&#13;&#10;    List&lt;StoreOrder&gt; findOrdersByUser(@Param(&quot;cardNumber&quot;) Integer cardNumber);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 查询所有订单&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT * FROM store_order ORDER BY time DESC&quot;)&#13;&#10;    List&lt;StoreOrder&gt; findAllOrders();&#13;&#10;&#13;&#10;    // 销售统计相关操作&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 获取商品销售统计&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT si.uuid, si.item_name, SUM(st.amount) as total_amount, SUM(st.item_price * st.amount) as total_revenue &quot; +&#13;&#10;            &quot;FROM store_transaction st JOIN store_item si ON st.item_uuid = si.uuid &quot; +&#13;&#10;            &quot;WHERE st.status = true &quot; +&#13;&#10;            &quot;GROUP BY si.uuid, si.item_name &quot; +&#13;&#10;            &quot;ORDER BY total_revenue DESC&quot;)&#13;&#10;    List&lt;SalesStats&gt; getSalesStatistics();&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 获取今日销售总额&#13;&#10;     */&#13;&#10;    @Select(&quot;SELECT SUM(item_price * amount) as total_revenue FROM store_transaction &quot; +&#13;&#10;            &quot;WHERE status = true AND DATE(time) = CURDATE()&quot;)&#13;&#10;    Integer getTodaySalesRevenue();&#13;&#10;&#13;&#10;    // 销售统计结果映射类&#13;&#10;    class SalesStats {&#13;&#10;        private UUID itemUuid;&#13;&#10;        private String itemName;&#13;&#10;        private Integer totalAmount;&#13;&#10;        private Integer totalRevenue;&#13;&#10;&#13;&#10;        // Getter和Setter方法&#13;&#10;        public UUID getItemUuid() {&#13;&#10;            return itemUuid;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setItemUuid(UUID itemUuid) {&#13;&#10;            this.itemUuid = itemUuid;&#13;&#10;        }&#13;&#10;&#13;&#10;        public String getItemName() {&#13;&#10;            return itemName;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setItemName(String itemName) {&#13;&#10;            this.itemName = itemName;&#13;&#10;        }&#13;&#10;&#13;&#10;        public Integer getTotalAmount() {&#13;&#10;            return totalAmount;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setTotalAmount(Integer totalAmount) {&#13;&#10;            this.totalAmount = totalAmount;&#13;&#10;        }&#13;&#10;&#13;&#10;        public Integer getTotalRevenue() {&#13;&#10;            return totalRevenue;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setTotalRevenue(Integer totalRevenue) {&#13;&#10;            this.totalRevenue = totalRevenue;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/Server/service/shop/StoreService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/Server/service/shop/StoreService.java" />
              <option name="originalContent" value="package Server.service.shop;&#10;&#10;import Server.dao.shop.StoreMapper;&#10;import Server.model.shop.StoreItem;&#10;import Server.model.shop.StoreOrder;&#10;import Server.model.shop.StoreOrderItem;&#10;import Server.util.DatabaseUtil;&#10;import org.apache.ibatis.session.SqlSession;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;import static Server.model.shop.StoreOrder.STATUS_PAID;&#10;import static Server.model.shop.StoreOrder.STATUS_PENDING;&#10;&#10;/**&#10; * 商店服务类&#10; * 处理商店相关的业务逻辑&#10; */&#10;public class StoreService {&#10;&#10;    /**&#10;     * 获取所有商品&#10;     */&#10;    public List&lt;StoreItem&gt; getAllItems() {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            return storeMapper.findAllItems();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 搜索商品&#10;     */&#10;    public List&lt;StoreItem&gt; searchItems(String keyword) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            return storeMapper.searchItems(keyword);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 根据ID获取商品&#10;     */&#10;    public StoreItem getItemById(UUID uuid) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            return storeMapper.findItemById(uuid);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 添加商品（管理员功能）&#10;     */&#10;    public boolean addItem(StoreItem item) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            int result = storeMapper.insertItem(item);&#10;            sqlSession.commit();&#10;            return result &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 更新商品信息（管理员功能）&#10;     */&#10;    public boolean updateItem(StoreItem item) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            int result = storeMapper.updateItem(item);&#10;            sqlSession.commit();&#10;            return result &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 删除商品（管理员功能）&#10;     */&#10;    public boolean deleteItem(UUID uuid) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            int result = storeMapper.deleteItem(uuid);&#10;            sqlSession.commit();&#10;            return result &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 按类别获取商品&#10;     */&#10;    public List&lt;StoreItem&gt; getItemsByCategory(String category) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            return storeMapper.findItemsByCategory(category);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 获取所有商品类别&#10;     */&#10;    public List&lt;String&gt; getAllCategories() {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            return storeMapper.findAllCategories();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 按类别和关键词搜索商品&#10;     */&#10;    public List&lt;StoreItem&gt; searchItemsByCategoryAndKeyword(String category, String keyword) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            return storeMapper.searchItemsByCategoryAndKeyword(category, keyword);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 创建订单（支持多种商品）&#10;     */&#10;    public StoreOrder createOrder(StoreOrder order) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;&#10;            // 检查商品库存&#10;            for (StoreOrderItem item : order.getItems()) {&#10;                StoreItem storeItem = storeMapper.findItemById(item.getItemUuid());&#10;                if (storeItem == null) {&#10;                    throw new RuntimeException(&quot;商品不存在: &quot; + item.getItemUuid());&#10;                }&#10;&#10;                if (storeItem.getStock() &lt; item.getAmount()) {&#10;                    throw new RuntimeException(&quot;商品库存不足: &quot; + storeItem.getItemName());&#10;                }&#10;            }&#10;&#10;            // 插入订单主信息&#10;            int orderResult = storeMapper.insertOrder(order);&#10;            if (orderResult == 0) {&#10;                throw new RuntimeException(&quot;创建订单失败&quot;);&#10;            }&#10;&#10;            // 插入订单商品项&#10;            for (StoreOrderItem item : order.getItems()) {&#10;                item.setOrderUuid(order.getUuid());&#10;                int itemResult = storeMapper.insertOrderItem(item);&#10;&#10;                if (itemResult == 0) {&#10;                    throw new RuntimeException(&quot;添加订单商品项失败&quot;);&#10;                }&#10;&#10;                // 更新商品库存&#10;                int stockUpdateResult = storeMapper.updateItemStock(item.getItemUuid(), item.getAmount());&#10;                if (stockUpdateResult == 0) {&#10;                    throw new RuntimeException(&quot;更新商品库存失败&quot;);&#10;                }&#10;            }&#10;&#10;            sqlSession.commit();&#10;            return order;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 支付订单（使用一卡通支付）&#10;     */&#10;    public boolean payOrder(UUID orderUuid) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            FinanceService financeService = new FinanceService();&#10;&#10;            // 获取订单信息&#10;            StoreOrder order = storeMapper.findOrderById(orderUuid);&#10;            if (order == null) {&#10;                throw new RuntimeException(&quot;订单不存在&quot;);&#10;            }&#10;&#10;            if (order.getStatus() != STATUS_PENDING) {&#10;                throw new RuntimeException(&quot;订单状态不正确: &quot; + order.getStatus());&#10;            }&#10;&#10;            // 使用一卡通支付&#10;            boolean paymentResult = financeService.consumeFinanceCard(&#10;                    order.getCardNumber(),&#10;                    order.getTotalAmount(),&#10;                    &quot;商店购物支付&quot;,&#10;                    orderUuid.toString()&#10;            );&#10;&#10;            if (paymentResult) {&#10;                // 更新订单状态为已支付&#10;                int updateResult = storeMapper.updateOrderStatus(orderUuid, &quot;已支付&quot;);&#10;&#10;                // 增加商品销量&#10;                for (StoreOrderItem item : order.getItems()) {&#10;                    storeMapper.increaseItemSales(item.getItemUuid(), item.getAmount());&#10;                }&#10;&#10;                sqlSession.commit();&#10;                return updateResult &gt; 0;&#10;            } else {&#10;                throw new RuntimeException(&quot;支付失败&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 取消订单&#10;     */&#10;    public boolean cancelOrder(UUID orderUuid) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;&#10;            // 获取订单信息&#10;            StoreOrder order = storeMapper.findOrderById(orderUuid);&#10;            if (order == null) {&#10;                throw new RuntimeException(&quot;订单不存在&quot;);&#10;            }&#10;&#10;            if (order.getStatus() == STATUS_PAID) {&#10;                throw new RuntimeException(&quot;已支付的订单不能取消&quot;);&#10;            }&#10;&#10;            // 恢复商品库存&#10;            for (StoreOrderItem item : order.getItems()) {&#10;                int stockUpdateResult = storeMapper.updateItemStock(item.getItemUuid(), -item.getAmount());&#10;                if (stockUpdateResult == 0) {&#10;                    throw new RuntimeException(&quot;更新商品库存失败&quot;);&#10;                }&#10;            }&#10;&#10;            // 删除订单&#10;            int result = storeMapper.deleteOrder(orderUuid);&#10;            sqlSession.commit();&#10;            return result &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 退款操作&#10;     */&#10;    public boolean refundOrder(UUID orderUuid, String refundReason) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            FinanceService financeService = new FinanceService();&#10;&#10;            // 获取订单信息&#10;            StoreOrder order = storeMapper.findOrderById(orderUuid);&#10;            if (order == null) {&#10;                throw new RuntimeException(&quot;订单不存在&quot;);&#10;            }&#10;&#10;            if (!StoreOrder.STATUS_PAID.equals(order.getStatus())) {&#10;                throw new RuntimeException(&quot;只有已支付的订单才能退款&quot;);&#10;            }&#10;&#10;            // 将退款金额退回用户一卡通账户&#10;            boolean refundResult = financeService.refundToFinanceCard(&#10;                    order.getCardNumber(),&#10;                    order.getTotalAmount(),&#10;                    &quot;订单退款: &quot; + (refundReason != null ? refundReason : &quot;&quot;),&#10;                    orderUuid.toString()&#10;            );&#10;&#10;            if (refundResult) {&#10;                // 更新订单状态为已退款&#10;                int updateResult = storeMapper.refundOrder(orderUuid);&#10;&#10;                // 减少商品销量&#10;                for (StoreOrderItem item : order.getItems()) {&#10;                    storeMapper.decreaseItemSales(item.getItemUuid(), item.getAmount());&#10;                }&#10;&#10;                sqlSession.commit();&#10;                return updateResult &gt; 0;&#10;            } else {&#10;                throw new RuntimeException(&quot;退款失败&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 获取用户订单&#10;     */&#10;    public List&lt;StoreOrder&gt; getUserOrders(Integer cardNumber) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            return storeMapper.findOrdersByUser(cardNumber);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 获取所有订单（管理员功能）&#10;     */&#10;    public List&lt;StoreOrder&gt; getAllOrders() {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            return storeMapper.findAllOrders();&#10;        }&#10;    }&#10;&#10;    // 添加获取完整订单信息的方法&#10;    public StoreOrder getOrderById(UUID orderUuid) {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            return storeMapper.findOrderById(orderUuid);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 获取销售统计（管理员功能）&#10;     */&#10;    public List&lt;StoreMapper.SalesStats&gt; getSalesStatistics() {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            return storeMapper.getSalesStatistics();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 获取今日销售总额（管理员功能）&#10;     */&#10;    public Integer getTodaySalesRevenue() {&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#10;            return storeMapper.getTodaySalesRevenue();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package Server.service.shop;&#13;&#10;&#13;&#10;import Server.dao.shop.StoreMapper;&#13;&#10;import Server.model.shop.StoreItem;&#13;&#10;import Server.model.shop.StoreOrder;&#13;&#10;import Server.model.shop.StoreOrderItem;&#13;&#10;import Server.util.DatabaseUtil;&#13;&#10;import org.apache.ibatis.session.SqlSession;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;import java.util.UUID;&#13;&#10;&#13;&#10;import static Server.model.shop.StoreOrder.STATUS_PAID;&#13;&#10;import static Server.model.shop.StoreOrder.STATUS_PENDING;&#13;&#10;&#13;&#10;/**&#13;&#10; * 商店服务类&#13;&#10; * 处理商店相关的业务逻辑&#13;&#10; */&#13;&#10;public class StoreService {&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 获取所有商品&#13;&#10;     */&#13;&#10;    public List&lt;StoreItem&gt; getAllItems() {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            return storeMapper.findAllItems();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 搜索商品&#13;&#10;     */&#13;&#10;    public List&lt;StoreItem&gt; searchItems(String keyword) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            return storeMapper.searchItems(keyword);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 根据ID获取商品&#13;&#10;     */&#13;&#10;    public StoreItem getItemById(UUID uuid) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            return storeMapper.findItemById(uuid);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 添加商品（管理员功能）&#13;&#10;     */&#13;&#10;    public boolean addItem(StoreItem item) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            int result = storeMapper.insertItem(item);&#13;&#10;            sqlSession.commit();&#13;&#10;            return result &gt; 0;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 更新商品信息（管理员功能）&#13;&#10;     */&#13;&#10;    public boolean updateItem(StoreItem item) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            int result = storeMapper.updateItem(item);&#13;&#10;            sqlSession.commit();&#13;&#10;            return result &gt; 0;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 删除商品（管理员功能）&#13;&#10;     */&#13;&#10;    public boolean deleteItem(UUID uuid) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            int result = storeMapper.deleteItem(uuid);&#13;&#10;            sqlSession.commit();&#13;&#10;            return result &gt; 0;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 按类别获取商品&#13;&#10;     */&#13;&#10;    public List&lt;StoreItem&gt; getItemsByCategory(String category) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            return storeMapper.findItemsByCategory(category);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 获取所有商品类别&#13;&#10;     */&#13;&#10;    public List&lt;String&gt; getAllCategories() {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            return storeMapper.findAllCategories();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 按类别和关键词搜索商品&#13;&#10;     */&#13;&#10;    public List&lt;StoreItem&gt; searchItemsByCategoryAndKeyword(String category, String keyword) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            return storeMapper.searchItemsByCategoryAndKeyword(category, keyword);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 创建订单（支持多种商品）&#13;&#10;     */&#13;&#10;    public StoreOrder createOrder(StoreOrder order) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;&#13;&#10;            // 检查商品库存&#13;&#10;            for (StoreOrderItem item : order.getItems()) {&#13;&#10;                StoreItem storeItem = storeMapper.findItemById(item.getItemUuid());&#13;&#10;                if (storeItem == null) {&#13;&#10;                    throw new RuntimeException(&quot;商品不存在: &quot; + item.getItemUuid());&#13;&#10;                }&#13;&#10;&#13;&#10;                if (storeItem.getStock() &lt; item.getAmount()) {&#13;&#10;                    throw new RuntimeException(&quot;商品库存不足: &quot; + storeItem.getItemName());&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // 插入订单主信息&#13;&#10;            int orderResult = storeMapper.insertOrder(order);&#13;&#10;            if (orderResult == 0) {&#13;&#10;                throw new RuntimeException(&quot;创建订单失败&quot;);&#13;&#10;            }&#13;&#10;&#13;&#10;            // 插入订单商品项&#13;&#10;            for (StoreOrderItem item : order.getItems()) {&#13;&#10;                item.setOrderUuid(order.getUuid());&#13;&#10;                int itemResult = storeMapper.insertOrderItem(item);&#13;&#10;&#13;&#10;                if (itemResult == 0) {&#13;&#10;                    throw new RuntimeException(&quot;添加订单商品项失败&quot;);&#13;&#10;                }&#13;&#10;&#13;&#10;                // 更新商品库存&#13;&#10;                int stockUpdateResult = storeMapper.updateItemStock(item.getItemUuid(), item.getAmount());&#13;&#10;                if (stockUpdateResult == 0) {&#13;&#10;                    throw new RuntimeException(&quot;更新商品库存失败&quot;);&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            sqlSession.commit();&#13;&#10;            return order;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 支付订单（使用一卡通支付）&#13;&#10;     */&#13;&#10;    public boolean payOrder(UUID orderUuid) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            FinanceService financeService = new FinanceService();&#13;&#10;            StoreOrder order = storeMapper.findOrderById(orderUuid);&#13;&#10;            if (order == null) {&#13;&#10;                throw new RuntimeException(&quot;订单不存在&quot;);&#13;&#10;            }&#13;&#10;            // 使用 equals 判断，避免字符串引用不一致导致失败&#13;&#10;            if (!STATUS_PENDING.equals(order.getStatus())) {&#13;&#10;                throw new RuntimeException(&quot;订单状态不正确: &quot; + order.getStatus());&#13;&#10;            }&#13;&#10;            boolean paymentResult = financeService.consumeFinanceCard(&#13;&#10;                    order.getCardNumber(),&#13;&#10;                    order.getTotalAmount(),&#13;&#10;                    &quot;商店购物支付&quot;,&#13;&#10;                    orderUuid.toString()&#13;&#10;            );&#13;&#10;            if (paymentResult) {&#13;&#10;                int updateResult = storeMapper.updateOrderStatus(orderUuid, STATUS_PAID);&#13;&#10;                for (StoreOrderItem item : order.getItems()) {&#13;&#10;                    storeMapper.increaseItemSales(item.getItemUuid(), item.getAmount());&#13;&#10;                }&#13;&#10;                sqlSession.commit();&#13;&#10;                return updateResult &gt; 0;&#13;&#10;            } else {&#13;&#10;                throw new RuntimeException(&quot;支付失败&quot;);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 取消订单&#13;&#10;     */&#13;&#10;    public boolean cancelOrder(UUID orderUuid) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            StoreOrder order = storeMapper.findOrderById(orderUuid);&#13;&#10;            if (order == null) {&#13;&#10;                throw new RuntimeException(&quot;订单不存在&quot;);&#13;&#10;            }&#13;&#10;            // 使用 equals 判断&#13;&#10;            if (STATUS_PAID.equals(order.getStatus())) {&#13;&#10;                throw new RuntimeException(&quot;已支付的订单不能取消&quot;);&#13;&#10;            }&#13;&#10;            for (StoreOrderItem item : order.getItems()) {&#13;&#10;                int stockUpdateResult = storeMapper.updateItemStock(item.getItemUuid(), -item.getAmount());&#13;&#10;                if (stockUpdateResult == 0) {&#13;&#10;                    throw new RuntimeException(&quot;更新商品库存失败&quot;);&#13;&#10;                }&#13;&#10;            }&#13;&#10;            int result = storeMapper.deleteOrder(orderUuid);&#13;&#10;            sqlSession.commit();&#13;&#10;            return result &gt; 0;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 退款操作&#13;&#10;     */&#13;&#10;    public boolean refundOrder(UUID orderUuid, String refundReason) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            FinanceService financeService = new FinanceService();&#13;&#10;&#13;&#10;            // 获取订单信息&#13;&#10;            StoreOrder order = storeMapper.findOrderById(orderUuid);&#13;&#10;            if (order == null) {&#13;&#10;                throw new RuntimeException(&quot;订单不存在&quot;);&#13;&#10;            }&#13;&#10;&#13;&#10;            if (!StoreOrder.STATUS_PAID.equals(order.getStatus())) {&#13;&#10;                throw new RuntimeException(&quot;只有已支付的订单才能退款&quot;);&#13;&#10;            }&#13;&#10;&#13;&#10;            // 将退款金额退回用户一卡通账户&#13;&#10;            boolean refundResult = financeService.refundToFinanceCard(&#13;&#10;                    order.getCardNumber(),&#13;&#10;                    order.getTotalAmount(),&#13;&#10;                    &quot;订单退款: &quot; + (refundReason != null ? refundReason : &quot;&quot;),&#13;&#10;                    orderUuid.toString()&#13;&#10;            );&#13;&#10;&#13;&#10;            if (refundResult) {&#13;&#10;                // 更新订单状态为已退款&#13;&#10;                int updateResult = storeMapper.refundOrder(orderUuid);&#13;&#10;&#13;&#10;                // 减少商品销量&#13;&#10;                for (StoreOrderItem item : order.getItems()) {&#13;&#10;                    storeMapper.decreaseItemSales(item.getItemUuid(), item.getAmount());&#13;&#10;                }&#13;&#10;&#13;&#10;                sqlSession.commit();&#13;&#10;                return updateResult &gt; 0;&#13;&#10;            } else {&#13;&#10;                throw new RuntimeException(&quot;退款失败&quot;);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 获取用户订单&#13;&#10;     */&#13;&#10;    public List&lt;StoreOrder&gt; getUserOrders(Integer cardNumber) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            return storeMapper.findOrdersByUser(cardNumber);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 获取所有订单（管理员功能）&#13;&#10;     */&#13;&#10;    public List&lt;StoreOrder&gt; getAllOrders() {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            return storeMapper.findAllOrders();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 添加获取完整订单信息的方法&#13;&#10;    public StoreOrder getOrderById(UUID orderUuid) {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            return storeMapper.findOrderById(orderUuid);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 获取销售统计（管理员功能）&#13;&#10;     */&#13;&#10;    public List&lt;StoreMapper.SalesStats&gt; getSalesStatistics() {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            return storeMapper.getSalesStatistics();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 获取今日销售总额（管理员功能）&#13;&#10;     */&#13;&#10;    public Integer getTodaySalesRevenue() {&#13;&#10;        try (SqlSession sqlSession = DatabaseUtil.getSqlSession()) {&#13;&#10;            StoreMapper storeMapper = sqlSession.getMapper(StoreMapper.class);&#13;&#10;            return storeMapper.getTodaySalesRevenue();&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test_gson.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_gson.java" />
              <option name="updatedContent" value="import Server.model.Request;&#10;import com.google.gson.Gson;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class test_gson {&#10;    public static void main(String[] args) {&#10;        Gson gson = new Gson();&#10;        Map&lt;String,Object&gt; data = new HashMap&lt;&gt;();&#10;        data.put(&quot;cardNumber&quot;, 213232556);&#10;        data.put(&quot;id&quot;, &quot;1&quot;);&#10;        &#10;        Request request = new Request(&quot;forgetPwd&quot;, data);&#10;        String json = gson.toJson(request);&#10;        System.out.println(&quot;Serialized JSON: &quot; + json);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>